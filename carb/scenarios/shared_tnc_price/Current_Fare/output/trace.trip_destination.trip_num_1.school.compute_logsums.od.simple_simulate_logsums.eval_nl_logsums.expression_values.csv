Expression,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
sov_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
is_joint == True,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt*odt_skims['SOV_TIME'],-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_walktimeshort * df.total_terminal_time,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOV_DIST'],-0.442124871860487,-0.439717168887869,-0.5337065737994192,-0.5200629576384446,-0.48867369394618637,-0.4715522959416059,-0.4513989454377044,-0.4993745847076462,-0.6006762916196625,-0.5645608150647805,-0.5409296827172733,-0.48448253752765336,-0.49232982793782243,-0.34537102566306416,-0.317637895962442,-0.27840132485141783,-0.26689788344101567,-0.2554836010960317,-0.24763629367726567,-0.3457277299591247,-0.15979986778679064,-0.049313242110825724,-0.07579792803598201,-0.10067748289820887,-0.4190287959570706
c_cost * total_parking_cost,-0.029584487547672726,-0.005524487583067904,-0.004961376579992819,-0.0030621412406521063,-0.0029799941124427124,-0.0032446170517230802,-0.004141404140082684,-0.004437760836116694,-0.004602980014291162,-0.003567887309687277,-0.003053779803298781,-0.007625420940603577,-0.0043441846169775915,-0.0066016049394785736,-0.005817581284020672,-0.005120956553131284,-0.009231734067251937,-0.005449592001564277,-0.00577408197343948,-0.0030526563705700564,-0.002872347983245838,-0.003185842354105316,-0.004003503953399116,-0.004637707617725298,-0.0042217853948824735
@df.c_cost * odt_skims['SOV_BTOLL'],-0.1679631184407796,-0.16780709687880668,-0.0333439697174118,-0.03282228470878086,-0.030228485757121438,-0.02977993492572561,-0.02864880277985397,-0.03153025997682311,-0.038258537326795586,-0.035747622040115196,-0.03461649175412294,-0.029716552096113808,-0.03175453539252102,-0.023105289057741635,-0.020682134039791626,-0.01824435293034635,-0.01731312062093343,-0.016664671812958266,-0.01586020330288957,-0.022208185535070597,-0.012115772299930968,-0.003598164973337611,-0.003500653589468846,-0.0041637301163337396,-0.026986236137607464
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
sovtoll_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
auto_ownership == 0 # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (2),1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
is_joint == True # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt*odt_skims['SOVTOLL_TIME'],-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_walktimeshort * df.total_terminal_time # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOVTOLL_DIST'],-0.442124871860487,-0.439717168887869,-0.5337065737994192,-0.5200629576384446,-0.48867369394618637,-0.4715522959416059,-0.4513989454377044,-0.4993745847076462,-0.6006762916196625,-0.5645608150647805,-0.5409296827172733,-0.48448253752765336,-0.49232982793782243,-0.34537102566306416,-0.317637895962442,-0.27840132485141783,-0.26689788344101567,-0.2554836010960317,-0.24763629367726567,-0.3457277299591247,-0.15979986778679064,-0.049313242110825724,-0.07579792803598201,-0.10067748289820887,-0.4190287959570706
c_cost * total_parking_cost # (2),-0.029584487547672726,-0.005524487583067904,-0.004961376579992819,-0.0030621412406521063,-0.0029799941124427124,-0.0032446170517230802,-0.004141404140082684,-0.004437760836116694,-0.004602980014291162,-0.003567887309687277,-0.003053779803298781,-0.007625420940603577,-0.0043441846169775915,-0.0066016049394785736,-0.005817581284020672,-0.005120956553131284,-0.009231734067251937,-0.005449592001564277,-0.00577408197343948,-0.0030526563705700564,-0.002872347983245838,-0.003185842354105316,-0.004003503953399116,-0.004637707617725298,-0.0042217853948824735
@df.c_cost * odt_skims['SOVTOLL_BTOLL'],-0.1679631184407796,-0.16780709687880668,-0.0333439697174118,-0.03282228470878086,-0.030228485757121438,-0.02977993492572561,-0.02864880277985397,-0.03153025997682311,-0.038258537326795586,-0.035747622040115196,-0.03461649175412294,-0.029716552096113808,-0.03175453539252102,-0.023105289057741635,-0.020682134039791626,-0.01824435293034635,-0.01731312062093343,-0.016664671812958266,-0.01586020330288957,-0.022208185535070597,-0.012115772299930968,-0.003598164973337611,-0.003500653589468846,-0.0041637301163337396,-0.026986236137607464
@df.c_cost * odt_skims['SOVTOLL_VTOLL'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov2_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint & (number_of_participants > 2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2_TIME'],-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_walktimeshort * df.total_terminal_time # (3),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2_DIST'],-0.442124871860487,-0.439717168887869,-0.5337065737994192,-0.5200629576384446,-0.48867369394618637,-0.4715522959416059,-0.4513989454377044,-0.4993745847076462,-0.6006762916196625,-0.5645608150647805,-0.5409296827172733,-0.48448253752765336,-0.49232982793782243,-0.34537102566306416,-0.317637895962442,-0.27840132485141783,-0.26689788344101567,-0.2554836010960317,-0.24763629367726567,-0.3457277299591247,-0.15979986778679064,-0.049313242110825724,-0.07579792803598201,-0.10067748289820887,-0.4190287959570706
@df.c_cost * df.total_parking_cost / costShareSr2,-0.016905421455812985,-0.0031568500474673735,-0.0028350723314244683,-0.0017497949946583464,-0.0017028537785386928,-0.001854066886698903,-0.0023665166514758194,-0.002535863334923825,-0.002630274293880664,-0.00203879274839273,-0.0017450170304564464,-0.004357383394630615,-0.002482391209701481,-0.003772345679702042,-0.0033243321622975267,-0.002926260887503591,-0.00527527660985825,-0.003114052572322444,-0.003299475413393989,-0.0017443750688971751,-0.0016413417047119075,-0.001820481345203038,-0.002287716544799495,-0.00265011863870017,-0.002412448797075699
@df.c_cost * odt_skims['HOV2_BTOLL'] / costShareSr2,-0.09597892482330263,-0.09588976964503239,-0.01905369698137817,-0.018755591262160493,-0.01727342043264082,-0.017017105671843207,-0.01637074444563084,-0.018017291415327492,-0.021862021329597477,-0.02042721259435154,-0.019780852430927393,-0.01698088691206503,-0.0181454487957263,-0.013203022318709507,-0.011818362308452358,-0.010425344531626485,-0.009893211783390532,-0.009522669607404723,-0.009062973315936898,-0.012690391734326055,-0.00692329845710341,-0.0020560942704786348,-0.0020003734796964832,-0.0023792743521907083,-0.015420706364347123
@c_hhsize1_sr * (df.hhsize == 1),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov2toll_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
is_joint & (number_of_participants > 2) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'],-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_walktimeshort * df.total_terminal_time # (4),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2TOLL_DIST'],-0.442124871860487,-0.439717168887869,-0.5337065737994192,-0.5200629576384446,-0.48867369394618637,-0.4715522959416059,-0.4513989454377044,-0.4993745847076462,-0.6006762916196625,-0.5645608150647805,-0.5409296827172733,-0.48448253752765336,-0.49232982793782243,-0.34537102566306416,-0.317637895962442,-0.27840132485141783,-0.26689788344101567,-0.2554836010960317,-0.24763629367726567,-0.3457277299591247,-0.15979986778679064,-0.049313242110825724,-0.07579792803598201,-0.10067748289820887,-0.4190287959570706
@df.c_cost * df.total_parking_cost / costShareSr2 # (2),-0.016905421455812985,-0.0031568500474673735,-0.0028350723314244683,-0.0017497949946583464,-0.0017028537785386928,-0.001854066886698903,-0.0023665166514758194,-0.002535863334923825,-0.002630274293880664,-0.00203879274839273,-0.0017450170304564464,-0.004357383394630615,-0.002482391209701481,-0.003772345679702042,-0.0033243321622975267,-0.002926260887503591,-0.00527527660985825,-0.003114052572322444,-0.003299475413393989,-0.0017443750688971751,-0.0016413417047119075,-0.001820481345203038,-0.002287716544799495,-0.00265011863870017,-0.002412448797075699
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'] / costShareSr2,-0.09597892482330263,-0.09588976964503239,-0.01905369698137817,-0.018755591262160493,-0.01727342043264082,-0.017017105671843207,-0.01637074444563084,-0.018017291415327492,-0.021862021329597477,-0.02042721259435154,-0.019780852430927393,-0.01698088691206503,-0.0181454487957263,-0.013203022318709507,-0.011818362308452358,-0.010425344531626485,-0.009893211783390532,-0.009522669607404723,-0.009062973315936898,-0.012690391734326055,-0.00692329845710341,-0.0020560942704786348,-0.0020003734796964832,-0.0023792743521907083,-0.015420706364347123
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] / costShareSr2,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1) # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov3_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV3_TIME'],-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_walktimeshort * df.total_terminal_time # (5),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3_DIST'],-0.442124871860487,-0.439717168887869,-0.5337065737994192,-0.5200629576384446,-0.48867369394618637,-0.4715522959416059,-0.4513989454377044,-0.4993745847076462,-0.6006762916196625,-0.5645608150647805,-0.5409296827172733,-0.48448253752765336,-0.49232982793782243,-0.34537102566306416,-0.317637895962442,-0.27840132485141783,-0.26689788344101567,-0.2554836010960317,-0.24763629367726567,-0.3457277299591247,-0.15979986778679064,-0.049313242110825724,-0.07579792803598201,-0.10067748289820887,-0.4190287959570706
@df.c_cost *  df.total_parking_cost / costShareSr3,-0.011833795019069091,-0.0022097950332271615,-0.0019845506319971277,-0.0012248564962608426,-0.001191997644977085,-0.0012978468206892321,-0.0016565616560330735,-0.0017751043344466776,-0.0018411920057164646,-0.001427154923874911,-0.0012215119213195124,-0.0030501683762414306,-0.0017376738467910365,-0.0026406419757914294,-0.002327032513608269,-0.0020483826212525135,-0.0036926936269007747,-0.002179836800625711,-0.002309632789375792,-0.0012210625482280226,-0.001148939193298335,-0.0012743369416421265,-0.0016014015813596463,-0.0018550830470901191,-0.0016887141579529895
@df.c_cost * odt_skims['HOV3_BTOLL'] / costShareSr3,-0.06718524737631185,-0.06712283875152267,-0.013337587886964718,-0.013128913883512344,-0.012091394302848574,-0.011911973970290245,-0.011459521111941588,-0.012612103990729245,-0.015303414930718235,-0.014299048816046078,-0.013846596701649175,-0.011886620838445524,-0.012701814157008409,-0.009242115623096655,-0.008272853615916651,-0.00729774117213854,-0.006925248248373372,-0.006665868725183306,-0.006344081321155828,-0.00888327421402824,-0.004846308919972387,-0.0014392659893350443,-0.0014002614357875383,-0.0016654920465334958,-0.010794494455042986
@c_hhsize1_sr * (df.hhsize == 1) # (3),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov3toll_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['HOV3TOLL_TIME'],-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_walktimeshort * df.total_terminal_time # (6),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3TOLL_DIST'],-0.442124871860487,-0.439717168887869,-0.5337065737994192,-0.5200629576384446,-0.48867369394618637,-0.4715522959416059,-0.4513989454377044,-0.4993745847076462,-0.6006762916196625,-0.5645608150647805,-0.5409296827172733,-0.48448253752765336,-0.49232982793782243,-0.34537102566306416,-0.317637895962442,-0.27840132485141783,-0.26689788344101567,-0.2554836010960317,-0.24763629367726567,-0.3457277299591247,-0.15979986778679064,-0.049313242110825724,-0.07579792803598201,-0.10067748289820887,-0.4190287959570706
@df.c_cost * df.total_parking_cost / costShareSr3,-0.011833795019069091,-0.0022097950332271615,-0.0019845506319971277,-0.0012248564962608426,-0.001191997644977085,-0.0012978468206892321,-0.0016565616560330735,-0.0017751043344466776,-0.0018411920057164646,-0.001427154923874911,-0.0012215119213195124,-0.0030501683762414306,-0.0017376738467910365,-0.0026406419757914294,-0.002327032513608269,-0.0020483826212525135,-0.0036926936269007747,-0.002179836800625711,-0.002309632789375792,-0.0012210625482280226,-0.001148939193298335,-0.0012743369416421265,-0.0016014015813596463,-0.0018550830470901191,-0.0016887141579529895
@df.c_cost * odt_skims['HOV3TOLL_BTOLL'] / costShareSr3,-0.06718524737631185,-0.06712283875152267,-0.013337587886964718,-0.013128913883512344,-0.012091394302848574,-0.011911973970290245,-0.011459521111941588,-0.012612103990729245,-0.015303414930718235,-0.014299048816046078,-0.013846596701649175,-0.011886620838445524,-0.012701814157008409,-0.009242115623096655,-0.008272853615916651,-0.00729774117213854,-0.006925248248373372,-0.006665868725183306,-0.006344081321155828,-0.00888327421402824,-0.004846308919972387,-0.0014392659893350443,-0.0014002614357875383,-0.0016654920465334958,-0.010794494455042986
@df.c_cost * odt_skims['HOV3TOLL_VTOLL'] / costShareSr3,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1) # (4),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_walktimeshort * od_skims['DISTWALK'].clip(upper=walkThresh) * 60/walkSpeed
@c_walktimelong * (od_skims['DISTWALK'] - walkThresh).clip(lower=0) * 60/walkSpeed,-530.2385864257812,-543.1924438476562,-929.530029296875,-933.323974609375,-930.830810546875,-927.416259765625,-928.9337768554688,-906.9828491210938,-811.048828125,-874.3544311523438,-880.26220703125,-906.4408569335938,-910.9935913085938,-994.9494018554688,-1016.7377319335938,-1029.6373291015625,-1020.3692016601562,-1035.7620849609375,-1036.087158203125,-976.0336303710938,-324.4411926269531,-22.438796997070312,-39.13240432739258,-52.46560287475586,-433.0038146972656
@c_density_index * df.density_index,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_walk * df.trip_topology,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065,-0.4065
is_atwork_subtour & ~work_tour_is_bike,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_biketimeshort * od_skims['DISTBIKE'].clip(upper=bikeThresh)*60/bikeSpeed,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-3.252000093460083,-2.7858800888061523,-3.252000093460083,-3.252000093460083,-3.252000093460083
@c_biketimelong * (od_skims['DISTBIKE']-bikeThresh).clip(lower=0)*60/bikeSpeed,-251.56932067871094,-258.04620361328125,-451.2149658203125,-453.1119689941406,-451.8654479980469,-450.1580810546875,-450.9169006347656,-439.9413757324219,-391.9743957519531,-423.627197265625,-426.5811462402344,-439.67041015625,-441.94677734375,-483.9247131347656,-494.8188781738281,-501.2686767578125,-496.6346130371094,-504.3310241699219,-504.4936218261719,-474.4668273925781,-148.67059326171875,-0.0,-6.016201019287109,-12.68280029296875,-202.95188903808594
@c_density_index*df.density_index,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_bike * df.trip_topology,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542,-0.542
walk_local_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_LOC_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_short_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_LOC_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LOC_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_wacc * df.origin_walk_time,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_wegr * df.destination_walk_time,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_waux * odt_skims['WLK_LOC_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_LOC_WLK_FAR'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_density_index * df.density_index # (2),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age <= 10),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_lrf_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_LRF_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@(c_ivt_lrt-c_ivt) * odt_skims['WLK_LRF_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(c_ivt_ferry-c_ivt_lrt) * odt_skims['WLK_LRF_WLK_FERRYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_LRF_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LRF_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_wacc * df.origin_walk_time # (2),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (2),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_waux * odt_skims['WLK_LRF_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_LRF_WLK_FAR'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_density_index * df.density_index # (3),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (2),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age <= 10) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_express_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_EXP_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.0804715156555176,-1.154457449913025,-0.0
@(c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.20318977534770966,0.20318977534770966,0.0
@c_short_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.5419999957084656,-0.5419999957084656,-0.0
@c_long_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.13756772875785828,-0.13756772875785828,-0.0
@c_xwait * odt_skims['WLK_EXP_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-2.439000129699707,-2.1679999828338623,-0.0
@c_xfers_wlk * (odt_skims['WLK_EXP_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.2709999978542328,-0.2709999978542328,-0.0
@c_wacc * df.origin_walk_time # (3),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (3),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_waux * odt_skims['WLK_EXP_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_EXP_WLK_FAR'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.11067526236881559,-0.11067526236881559,-0.0
@c_density_index * df.density_index # (4),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (3),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age <= 10) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_heavyrail_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_HVY_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.0804715156555176,-1.154457449913025,-0.0
@(c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.5419999957084656,-0.5419999957084656,-0.0
@c_long_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.13756772875785828,-0.13756772875785828,-0.0
@c_xwait * odt_skims['WLK_HVY_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-2.439000129699707,-2.1679999828338623,-0.0
@c_xfers_wlk * (odt_skims['WLK_HVY_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.2709999978542328,-0.2709999978542328,-0.0
@c_wacc * df.origin_walk_time # (4),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (4),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_waux * odt_skims['WLK_HVY_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_HVY_WLK_FAR'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.11067526236881559,-0.11067526236881559,-0.0
@c_density_index * df.density_index # (5),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (4),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age <= 10) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_commuter_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_COM_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.0804715156555176,-1.154457449913025,-0.0
@(c_ivt_com-c_ivt) * odt_skims['WLK_COM_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.5419999957084656,-0.5419999957084656,-0.0
@c_long_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.13756772875785828,-0.13756772875785828,-0.0
@c_xwait * odt_skims['WLK_COM_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-2.439000129699707,-2.1679999828338623,-0.0
@c_xfers_wlk * (odt_skims['WLK_COM_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.2709999978542328,-0.2709999978542328,-0.0
@c_wacc * df.origin_walk_time # (5),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (5),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_waux * odt_skims['WLK_COM_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_COM_WLK_FAR'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.11067526236881559,-0.11067526236881559,-0.0
@c_density_index * df.density_index # (6),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (5),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age < 10),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (3),1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (7),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (6),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_local_available_outbound,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LOC_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LOC_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_wlk * (odt_skims['DRV_LOC_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LOC_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_LOC_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LOC_WLK_FAR'] + costPerMile*odt_skims['DRV_LOC_WLK_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LOC_WLK_DDIST']/100)/ (od_skims['DIST']),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_local_available_inbound,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LOC_DRV_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.43750783190917963,-0.0,-0.0,-0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.542,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.13652168769836426,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LOC_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_wlk * (odt_skims['WLK_LOC_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LOC_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.39132399999999995,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@df.inbound * c_waux * odt_skims['WLK_LOC_DRV_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LOC_DRV_FAR'] + costPerMile*odt_skims['WLK_LOC_DRV_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0838796601485634,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['WLK_LOC_DRV_DDIST']/100)/ (od_skims['DIST']),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (4),1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (8),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (7),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_lrf_available_outbound,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LRF_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_lrt-c_ivt)*odt_skims['DRV_LRF_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['DRV_LRF_WLK_FERRYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LRF_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_LRF_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LRF_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_LRF_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LRF_WLK_FAR'] + costPerMile * odt_skims['DRV_LRF_WLK_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LRF_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_lrf_available_inbound,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LRF_DRV_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.43750783190917963,-0.0,-0.0,-0.0
@df.inbound * (c_ivt_lrt-c_ivt)*odt_skims['WLK_LRF_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['WLK_LRF_DRV_FERRYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.542,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.13652168769836426,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LRF_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_LRF_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LRF_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.39132399999999995,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (2),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@df.inbound * c_waux * odt_skims['WLK_LRF_DRV_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LRF_DRV_FAR'] + costPerMile * odt_skims['WLK_LRF_DRV_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0838796601485634,-0.0,-0.0,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_LRF_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (5),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (5),1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (9),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (8),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_express_available_outbound,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_EXP_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_exp-c_ivt) * odt_skims['DRV_EXP_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_EXP_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_EXP_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_EXP_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (3),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_EXP_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_EXP_WLK_FAR'] + costPerMile * odt_skims['DRV_EXP_WLK_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_EXP_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_express_available_inbound,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_EXP_DRV_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.4020916752929689,-0.43750783190917963,-0.9186331005859374,-0.9186331005859374,-0.0
@df.inbound * (c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.3644361562499999,0.0,0.17043551953124997,0.17043551953124997,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.542,-0.542,-0.542,-0.542,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.139537904548645,-0.13652168769836426,-0.13754334955215453,-0.13754334955215453,-0.0
@df.inbound * c_xwait * odt_skims['WLK_EXP_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.626,-0.0,-1.626,-1.626,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_EXP_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.4065,-0.0,-0.4065,-0.4065,-0.0
@df.inbound * c_dtim * odt_skims['WLK_EXP_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.529534,-0.39132399999999995,-0.137668,-0.370728,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (3),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@df.inbound * c_waux * odt_skims['WLK_EXP_DRV_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_EXP_DRV_FAR'] + costPerMile * odt_skims['WLK_EXP_DRV_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.21798341397538534,-0.0838796601485634,-0.06916594601563963,-0.08708992356238873,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_EXP_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (6),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (6),1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (10),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (9),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (5),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_heavyrail_available_outbound,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_HVY_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_hvy-c_ivt) * odt_skims['DRV_HVY_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_HVY_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_HVY_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (4),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_HVY_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_HVY_WLK_FAR'] + costPerMile * odt_skims['DRV_HVY_WLK_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_HVY_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_heavyrail_available_inbound,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_HVY_DRV_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * (c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_HVY_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_HVY_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100 # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (4),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@c_waux * odt_skims['WLK_HVY_DRV_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_HVY_DRV_FAR'] + costPerMile * odt_skims['WLK_HVY_DRV_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_HVY_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (7),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (7),1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (11),0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853,0.002241674835021853
@c_topology_trn * df.trip_topology # (10),-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (6),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_commuter_available_outbound,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_COM_WLK_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_com-c_ivt) * odt_skims['DRV_COM_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_COM_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_COM_WLK_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_COM_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (5),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_COM_WLK_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_COM_WLK_FAR'] + costPerMile * odt_skims['DRV_COM_WLK_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_COM_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_commuter_available_inbound,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_COM_DRV_TOTIVT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * (c_ivt_com-c_ivt) * odt_skims['WLK_COM_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_COM_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_COM_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_COM_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (5),-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972,-0.360972
@df.inbound * c_waux * odt_skims['WLK_COM_DRV_WAUX']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_COM_DRV_FAR'] + costPerMile * odt_skims['WLK_COM_DRV_DDIST']/100),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_COM_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'] # (2),-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_ivt * 1.5 * df.origTaxiWaitTime
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'],-0.1679631184407796,-0.16780709687880668,-0.0333439697174118,-0.03282228470878086,-0.030228485757121438,-0.02977993492572561,-0.02864880277985397,-0.03153025997682311,-0.038258537326795586,-0.035747622040115196,-0.03461649175412294,-0.029716552096113808,-0.03175453539252102,-0.023105289057741635,-0.020682134039791626,-0.01824435293034635,-0.01731312062093343,-0.016664671812958266,-0.01586020330288957,-0.022208185535070597,-0.012115772299930968,-0.003598164973337611,-0.003500653589468846,-0.0041637301163337396,-0.026986236137607464
@df.c_cost * (Taxi_baseFare + odt_skims['HOV2TOLL_DIST'] * Taxi_costPerMile + odt_skims['HOV2TOLL_TIME'] * Taxi_costPerMinute)*100,-6.014981243356593,-5.971637498206463,-7.131191948886396,-6.950553023354046,-6.543638195855685,-6.30956270369454,-6.041893698078939,-6.679812612919614,-7.998651597968105,-7.541714942394526,-7.236162797507497,-6.510874560583478,-6.583130130796418,-4.658891850003953,-4.287471332693029,-3.7911881847467375,-3.628003111328857,-3.480078348277033,-3.3731088732672236,-4.663962625163248,-2.2280832423906456,-0.7813575558183433,-1.1279126016596803,-1.4498946420649539,-5.636003664122528
@c_ivt * odt_skims['HOV2TOLL_TIME'] ,-1.9338560104370117,-1.8612279891967773,-1.736838936805725,-1.6864330768585205,-1.6186829805374146,-1.514348030090332,-1.435215950012207,-1.6276260614395142,-1.8774880170822144,-1.8620409965515137,-1.8154289722442627,-1.7295219898223877,-1.5826400518417358,-1.1590670347213745,-1.0330519676208496,-1.017063021659851,-0.9140830039978027,-0.8896930813789368,-0.8436229825019836,-1.1623190641403198,-0.6186929941177368,-0.2999970018863678,-0.37506401538848877,-0.4257410168647766,-1.4417200088500977
@c_ivt * 1.5 * df.origSingleTNCWaitTime
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']),-0.36928970557445884,-0.3686558884376171,-0.23983864833940452,-0.23879528576166018,-0.23326151966741238,-0.23236443288365582,-0.22947321317978706,-0.2359430788878022,-0.24958978765622072,-0.24448019309437077,-0.24252508788330443,-0.23243756334113216,-0.2368743130570945,-0.21910289769665947,-0.21431997235025066,-0.20945902134382027,-0.20773308303123827,-0.2063337841760272,-0.20493450019985124,-0.21741106213250797,-0.02291026582503426,-0.006031070408971235,-0.006425991153288102,-0.008327460232667479,-0.052992486947444246
"@df.c_cost * np.maximum(TNC_single_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_single_costPerMile + odt_skims['HOV2TOLL_TIME'] * TNC_single_costPerMinute, TNC_single_costMinimum) * 100",-4.157284983301806,-4.108417024397957,-4.738173672563133,-4.617196701941998,-4.359688589390608,-4.190136404881056,-4.009418620462718,-4.441364076720185,-5.285889553087226,-5.016597616718984,-4.824632025722978,-4.377069906209004,-4.370712094514266,-3.1191752629087066,-2.8630959097020092,-2.570874264329627,-2.442759076623187,-2.3492263002409928,-2.2722704428425433,-3.1231730736499426,-1.536426274472627,-0.5953890529100684,-0.820391309472217,-1.0231903259185837,-3.7768395872559326
@c_ivt * odt_skims['HOV2TOLL_TIME'] * TNC_shared_IVTFactor,-2.9007840156555176,-2.791841983795166,-2.6052584648132324,-2.5296497344970703,-2.4280245304107666,-2.271522045135498,-2.1528239250183105,-2.441439151763916,-2.8162319660186768,-2.7930614948272705,-2.7231435775756836,-2.594283103942871,-2.373960018157959,-1.738600492477417,-1.5495779514312744,-1.5255944728851318,-1.371124505996704,-1.3345396518707275,-1.2654345035552979,-1.743478536605835,-0.9280394911766052,-0.4499955177307129,-0.5625960230827332,-0.6386115550994873,-2.1625800132751465
@c_ivt  * 1.5 * df.origSharedTNCWaitTime
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (3),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']) # (2),-0.36928970557445884,-0.3686558884376171,-0.23983864833940452,-0.23879528576166018,-0.23326151966741238,-0.23236443288365582,-0.22947321317978706,-0.2359430788878022,-0.24958978765622072,-0.24448019309437077,-0.24252508788330443,-0.23243756334113216,-0.2368743130570945,-0.21910289769665947,-0.21431997235025066,-0.20945902134382027,-0.20773308303123827,-0.2063337841760272,-0.20493450019985124,-0.21741106213250797,-0.02291026582503426,-0.006031070408971235,-0.006425991153288102,-0.008327460232667479,-0.052992486947444246
"@df.c_cost * np.maximum(TNC_shared_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_shared_costPerMile + odt_skims['HOV2TOLL_TIME']* TNC_shared_costPerMinute, TNC_shared_costMinimum) * 100",-1.736353451158332,-1.7163100889740677,-1.9662897817448697,-1.917685181762146,-1.814537944879489,-1.7461533416336266,-1.6735172400982126,-1.8471553936319194,-2.185656045802172,-2.0782229028613135,-2.0013598534442494,-1.8223340013037916,-1.818648092335668,-1.316591971767717,-1.2135566996241258,-1.0969819705168167,-1.0451206287344,-1.0076567992706529,-0.976628803441907,-1.3182106247977694,-0.6816328224856992,-0.30413268493926865,-0.394384215610853,-0.4755964534822433,-1.5808865052184602
tour_mode_is_auto,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
tour_mode_is_walk,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_bike,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_walk_transit,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_drive_transit,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_ride_hail,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sov_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sov_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sov_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sov_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr2_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr2_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sr2_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr2_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr3p_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407,-2.7407
@sr3p_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718,-1.7718
@sr3p_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127,-1.2127
@sr3p_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714,-6.6714
@walk_ASC_rh * df.is_indiv * (df.i_tour_mode == I_WALK_MODE),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@bike_ASC_walk * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@bike_ASC_rh * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@walk_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@walk_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@walk_transit_ASC_express * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@walk_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@walk_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@walk_transit_ASC_sr2 * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@walk_transit_ASC_sr3p * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@walk_transit_ASC_walk * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@walk_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@drive_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_express * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_drive_transit),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_sr2 * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_sr3p * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_walk * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ride_hail_ASC_walk_transit * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ride_hail_ASC_taxi * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_tnc_single * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ride_hail_ASC_tnc_shared * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_sr3p * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_bike_ASC_walk * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_bike_ASC_rh * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_express * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_sr2 * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_sr3p * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_walk * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_rh * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_express * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_rh * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_sr2 * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_sr3p * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_walk * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_walk_transit * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_taxi * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_tnc_single * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_tnc_shared * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTWALK'] > 3),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTBIKE'] > 8),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(c_origin_density_index*df.origin_density_index).clip(c_origin_density_index_max) if origin_density_applied else 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_walk_express_penalty * ~(df.first_trip | df.first_trip),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@adjust_tnc_shared,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813,-0.813
