Expression,Label,407,449,475,499,519,529,530,531,540,543,563,570,578,583,586,603,660,661,677,698,700,702,706,712
sov_available == False,util_DRIVEALONEFREE_Unavailable,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0,util_DRIVEALONEFREE_Unavailable_for_zero_auto_households,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16,util_DRIVEALONEFREE_Unavailable_for_persons_less_than_16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint == True,util_DRIVEALONEFREE_Unavailable_for_joint_tours,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV,util_DRIVEALONEFREE_Unavailable_if_didn't_drive_to_work,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@odt_skims['SOV_TIME'] + dot_skims['SOV_TIME'],util_DRIVEALONEFREE_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@2 * walktimeshort_multiplier * df.terminal_time,util_DRIVEALONEFREE_Terminal_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * costPerMile * (odt_skims['SOV_DIST'] + dot_skims['SOV_DIST']),util_DRIVEALONEFREE_Operating_cost,8.671655268859862,11.573181136779784,9.52104263442993,9.244497365570068,7.589618801879882,7.398670599060058,7.813487665100097,7.407449999999999,8.052720898590087,8.935030599060058,6.904840599060058,4.99755970046997,6.301270599060058,5.9896094009399405,6.648049400939941,8.28975970046997,3.0639408083724975,3.6806797004699705,4.811001616744995,2.954200808372497,2.677655958137512,2.3703840418624877,7.787150299530029,5.109494132080077
@ivt_cost_multiplier * df.ivot * df.daily_parking_cost,util_DRIVEALONEFREE_Parking_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['SOV_BTOLL'] + dot_skims['SOV_BTOLL']),util_DRIVEALONEFREE_Bridge_toll,0.504719970703125,0.6464399871826172,0.5114400329589844,0.5196000366210938,0.4221600036621094,0.37788002014160155,0.40175999450683597,0.3844800109863281,0.45803997802734375,0.5119199981689453,0.3797999954223633,0.261,0.35112000274658206,0.3307199935913086,0.3718800201416016,0.48275999450683593,0.15095999908447266,0.1863599967956543,0.2575199890136719,0.1586400032043457,0.13752000045776366,0.11783999633789062,0.447,0.27695999908447266
@(df.age >= 16) & (df.age <= 19),util_DRIVEALONEFREE_Person_is_between_16_and_19_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
sovtoll_available == False,util_DRIVEALONEPAY_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
auto_ownership == 0 # (2),util_DRIVEALONEPAY_Unavailable_for_zero_auto_households,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (2),util_DRIVEALONEPAY_Unavailable_for_persons_less_than_16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint == True # (2),util_DRIVEALONEPAY_Unavailable_for_joint_tours,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV # (2),util_DRIVEALONEPAY_Unavailable_if_didn't_drive_to_work,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@odt_skims['SOVTOLL_TIME'] + dot_skims['SOVTOLL_TIME'],util_DRIVEALONEPAY_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@2 * walktimeshort_multiplier * df.terminal_time # (2),util_DRIVEALONEPAY_Terminal_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * costPerMile * (odt_skims['SOVTOLL_DIST'] + dot_skims['SOVTOLL_DIST']),util_DRIVEALONEPAY_Operating_cost,8.671655268859862,11.573181136779784,9.52104263442993,9.244497365570068,7.589618801879882,7.398670599060058,7.813487665100097,7.407449999999999,8.052720898590087,8.935030599060058,6.904840599060058,4.99755970046997,6.301270599060058,5.9896094009399405,6.648049400939941,8.28975970046997,3.0639408083724975,3.6806797004699705,4.811001616744995,2.954200808372497,2.677655958137512,2.3703840418624877,7.787150299530029,5.109494132080077
@ivt_cost_multiplier * df.ivot * df.daily_parking_cost # (2),util_DRIVEALONEPAY_Parking_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['SOVTOLL_BTOLL'] + dot_skims['SOVTOLL_BTOLL']),util_DRIVEALONEPAY_Bridge_toll,0.504719970703125,0.6464399871826172,0.5114400329589844,0.5196000366210938,0.4221600036621094,0.37788002014160155,0.40175999450683597,0.3844800109863281,0.45803997802734375,0.5119199981689453,0.3797999954223633,0.261,0.35112000274658206,0.3307199935913086,0.3718800201416016,0.48275999450683593,0.15095999908447266,0.1863599967956543,0.2575199890136719,0.1586400032043457,0.13752000045776366,0.11783999633789062,0.447,0.27695999908447266
@ivt_cost_multiplier * df.ivot * (odt_skims['SOVTOLL_VTOLL'] + dot_skims['SOVTOLL_VTOLL']),util_DRIVEALONEPAY_Value_toll,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.age >= 16) & (df.age <= 19) # (2),util_DRIVEALONEPAY_Person_is_between_16_and_19_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov2_available == False,util_SHARED2FREE_Unavailable,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint & (number_of_participants > 2),util_SHARED2FREE_Unavailable_based_on_party_size,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['HOV2_TIME'] + dot_skims['HOV2_TIME']),util_SHARED2FREE_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@2 * walktimeshort_multiplier * df.terminal_time # (3),util_SHARED2FREE_Terminal_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * costPerMile * (odt_skims['HOV2_DIST'] + dot_skims['HOV2_DIST']),util_SHARED2FREE_Operating_cost,8.671655268859862,11.573181136779784,9.52104263442993,9.244497365570068,7.589618801879882,7.398670599060058,7.813487665100097,7.407449999999999,8.052720898590087,8.935030599060058,6.904840599060058,4.99755970046997,6.301270599060058,5.9896094009399405,6.648049400939941,8.28975970046997,3.0639408083724975,3.6806797004699705,4.811001616744995,2.954200808372497,2.677655958137512,2.3703840418624877,7.787150299530029,5.109494132080077
@ivt_cost_multiplier * df.ivot * df.daily_parking_cost / costShareSr2,util_SHARED2FREE_Parking_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2_BTOLL'] + dot_skims['HOV2_BTOLL']) / costShareSr2,util_SHARED2FREE_Bridge_toll,0.2884114118303572,0.36939427839006694,0.292251447405134,0.296914306640625,0.24123428780691963,0.21593144008091517,0.229577139718192,0.21970286342075893,0.26173713030133927,0.2925257132393973,0.21702856881277904,0.14914285714285716,0.20064000156947545,0.18898285348074778,0.21250286865234377,0.27586285400390625,0.08626285661969867,0.10649142674037389,0.14715427943638396,0.09065143040248326,0.07858285740443638,0.06733714076450893,0.25542857142857145,0.15826285661969866
hov2toll_available == False,util_SHARED2PAY_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
is_joint & (number_of_participants > 2) # (2),util_SHARED2PAY_Unavailable_based_on_party_size,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['HOV2TOLL_TIME'] + dot_skims['HOV2TOLL_TIME']),util_SHARED2PAY_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@2 * walktimeshort_multiplier * df.terminal_time # (4),util_SHARED2PAY_Terminal_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * costPerMile * (odt_skims['HOV2TOLL_DIST'] + dot_skims['HOV2TOLL_DIST']),util_SHARED2PAY_Operating_cost,8.671655268859862,11.573181136779784,9.52104263442993,9.244497365570068,7.589618801879882,7.398670599060058,7.813487665100097,7.407449999999999,8.052720898590087,8.935030599060058,6.904840599060058,4.99755970046997,6.301270599060058,5.9896094009399405,6.648049400939941,8.28975970046997,3.0639408083724975,3.6806797004699705,4.811001616744995,2.954200808372497,2.677655958137512,2.3703840418624877,7.787150299530029,5.109494132080077
@ivt_cost_multiplier * df.ivot * df.daily_parking_cost / costShareSr2 # (2),util_SHARED2PAY_Parking_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']) / costShareSr2,util_SHARED2PAY_Bridge_toll,0.2884114118303572,0.36939427839006694,0.292251447405134,0.296914306640625,0.24123428780691963,0.21593144008091517,0.229577139718192,0.21970286342075893,0.26173713030133927,0.2925257132393973,0.21702856881277904,0.14914285714285716,0.20064000156947545,0.18898285348074778,0.21250286865234377,0.27586285400390625,0.08626285661969867,0.10649142674037389,0.14715427943638396,0.09065143040248326,0.07858285740443638,0.06733714076450893,0.25542857142857145,0.15826285661969866
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_VTOLL'] + dot_skims['HOV2TOLL_VTOLL']) / costShareSr2,util_SHARED2PAY_Value_toll,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov3_available == False,util_SHARED3FREE_Unavailable,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['HOV3_TIME'] + dot_skims['HOV3_TIME']),util_SHARED3FREE_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@2 * walktimeshort_multiplier * df.terminal_time # (5),util_SHARED3FREE_Terminal_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * costPerMile * (odt_skims['HOV3_DIST'] + dot_skims['HOV3_DIST']),util_SHARED3FREE_Operating_cost,8.671655268859862,11.573181136779784,9.52104263442993,9.244497365570068,7.589618801879882,7.398670599060058,7.813487665100097,7.407449999999999,8.052720898590087,8.935030599060058,6.904840599060058,4.99755970046997,6.301270599060058,5.9896094009399405,6.648049400939941,8.28975970046997,3.0639408083724975,3.6806797004699705,4.811001616744995,2.954200808372497,2.677655958137512,2.3703840418624877,7.787150299530029,5.109494132080077
@ivt_cost_multiplier * df.ivot *  df.daily_parking_cost / costShareSr3,util_SHARED3FREE_Parking_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV3_BTOLL'] + dot_skims['HOV3_BTOLL']) / costShareSr3,util_SHARED3FREE_Bridge_toll,0.20188798828125,0.2585759948730469,0.20457601318359378,0.20784001464843752,0.16886400146484376,0.1511520080566406,0.1607039978027344,0.15379200439453125,0.1832159912109375,0.2047679992675781,0.15191999816894533,0.1044,0.1404480010986328,0.13228799743652345,0.14875200805664063,0.19310399780273438,0.060383999633789064,0.07454399871826171,0.10300799560546876,0.06345600128173828,0.05500800018310546,0.04713599853515625,0.17880000000000001,0.11078399963378907
hov3toll_available == False,util_SHARED3PAY_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(odt_skims['HOV3TOLL_TIME'] + dot_skims['HOV3TOLL_TIME']),util_SHARED3PAY_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@2 * walktimeshort_multiplier * df.terminal_time # (6),util_SHARED3PAY_Terminal_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * costPerMile * (odt_skims['HOV3TOLL_DIST'] + dot_skims['HOV3TOLL_DIST']),util_SHARED3PAY_Operating_cost,8.671655268859862,11.573181136779784,9.52104263442993,9.244497365570068,7.589618801879882,7.398670599060058,7.813487665100097,7.407449999999999,8.052720898590087,8.935030599060058,6.904840599060058,4.99755970046997,6.301270599060058,5.9896094009399405,6.648049400939941,8.28975970046997,3.0639408083724975,3.6806797004699705,4.811001616744995,2.954200808372497,2.677655958137512,2.3703840418624877,7.787150299530029,5.109494132080077
@ivt_cost_multiplier * df.ivot * df.daily_parking_cost / costShareSr3,util_SHARED3PAY_Parking_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV3TOLL_BTOLL'] + dot_skims['HOV3TOLL_BTOLL']) / costShareSr3,util_SHARED3PAY_Bridge_toll,0.20188798828125,0.2585759948730469,0.20457601318359378,0.20784001464843752,0.16886400146484376,0.1511520080566406,0.1607039978027344,0.15379200439453125,0.1832159912109375,0.2047679992675781,0.15191999816894533,0.1044,0.1404480010986328,0.13228799743652345,0.14875200805664063,0.19310399780273438,0.060383999633789064,0.07454399871826171,0.10300799560546876,0.06345600128173828,0.05500800018310546,0.04713599853515625,0.17880000000000001,0.11078399963378907
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV3TOLL_VTOLL'] + dot_skims['HOV3TOLL_VTOLL']) / costShareSr3,util_SHARED3PAY_Value_toll,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@walktimeshort_multiplier * (od_skims['DISTWALK'].clip(upper=walkThresh) + od_skims.reverse('DISTWALK').clip(upper=walkThresh))*60/walkSpeed,util_WALK_Time_up_to_2_miles,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0,120.0
@walktimelong_multiplier * ((od_skims['DISTWALK'] - walkThresh).clip(lower=0) + (od_skims.reverse('DISTWALK') - walkThresh).clip(lower=0))*60/walkSpeed,util_WALK_Time_beyond_2_of_a_miles,6968.0,8936.0,7244.0,7272.0,6048.00048828125,5791.99951171875,6148.00048828125,5791.99951171875,6072.0,6640.0,4716.0,3672.0,4911.99951171875,5180.0,5743.99951171875,6604.0,2176.0,2656.0,3800.0,1640.0,1392.0,1236.0001220703125,6140.0,3448.0
@density_index_multiplier * df.density_index,util_WALK_Destination_zone_densityIndex
@coef_topology_walk_multiplier * df.dest_topology,util_WALK_Topology,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5,7.5
is_atwork_subtour & ~work_tour_is_bike,util_BIKE_Unavailable_if_didn't_bike_to_work,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@biketimeshort_multiplier * (od_skims['DISTBIKE'].clip(upper=bikeThresh) + od_skims.reverse('DISTBIKE').clip(upper=bikeThresh))*60/bikeSpeed,util_BIKE_Time_up_to_6_miles,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,240.0,224.0,199.1999969482422,183.6000213623047,240.0,240.0
@biketimelong_multiplier * ((od_skims['DISTBIKE']-bikeThresh).clip(lower=0) + (od_skims.reverse('DISTBIKE')-bikeThresh).clip(lower=0))*60/bikeSpeed,util_BIKE_Time_beyond_6_of_a_miles,2584.0,3568.0,2722.000244140625,2736.0,2124.000244140625,1995.9998779296875,2174.000244140625,1995.9998779296875,2136.0,2420.0,1458.0,936.0000610351562,1555.9998779296875,1690.0,1972.0,2402.000244140625,188.00001525878906,428.0000915527344,1000.0,0.0,0.0,0.0,2170.0,823.9999389648438
@density_index_multiplier * df.density_index # (2),util_BIKE_Destination_zone_densityIndex
@coef_topology_bike_multiplier * df.dest_topology,util_BIKE_Topology,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0
walk_local_available == False,util_WALK_LOC_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(odt_skims['WLK_LOC_WLK_TOTIVT']/100 + dot_skims['WLK_LOC_WLK_TOTIVT']/100),util_WALK_LOC_In_vehicle_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@short_i_wait_multiplier * ((odt_skims['WLK_LOC_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_LOC_WLK_IWAIT']/100).clip(upper=waitThresh)),util_WALK_LOC_Short_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@long_i_wait_multiplier * ((odt_skims['WLK_LOC_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_LOC_WLK_IWAIT']/100-waitThresh).clip(0)),util_WALK_LOC_Long_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xwait_multiplier * (odt_skims['WLK_LOC_WLK_XWAIT']/100 + dot_skims['WLK_LOC_WLK_XWAIT']/100),util_WALK_LOC_transfer_wait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xfers_wlk_multiplier * ((odt_skims['WLK_LOC_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_LOC_WLK_BOARDS']-1).clip(0)),util_WALK_LOC_number_of_transfers,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@2 * wacc_multiplier * df.origin_walk_time,util_WALK_LOC_Walk_access_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@2 * wegr_multiplier * df.destination_walk_time,util_WALK_LOC_Walk_egress_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@waux_multiplier * (odt_skims['WLK_LOC_WLK_WAUX']/100 + dot_skims['WLK_LOC_WLK_WAUX']/100),util_WALK_LOC_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['WLK_LOC_WLK_FAR'] + dot_skims['WLK_LOC_WLK_FAR']),util_WALK_LOC_Fare,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index,util_WALK_LOC_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology,util_WALK_LOC_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age <= 10),util_WALK_LOC_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_lrf_available == False,util_WALK_LRF_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(odt_skims['WLK_LRF_WLK_TOTIVT']/100 + dot_skims['WLK_LRF_WLK_TOTIVT']/100),util_WALK_LRF_In_vehicle_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(ivt_lrt_multiplier-1)*(odt_skims['WLK_LRF_WLK_KEYIVT']/100 + dot_skims['WLK_LRF_WLK_KEYIVT']/100),util_WALK_LRF_In_vehicle_time_on_Light_Rail,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@(ivt_ferry_multiplier-ivt_lrt_multiplier)*(odt_skims['WLK_LRF_WLK_FERRYIVT']/100 + dot_skims['WLK_LRF_WLK_FERRYIVT']/100),util_WALK_LRF_In_vehicle_time_on_Ferry,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@short_i_wait_multiplier * ((odt_skims['WLK_LRF_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_LRF_WLK_IWAIT']/100).clip(upper=waitThresh)),util_WALK_LRF_Short_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@long_i_wait_multiplier * ((odt_skims['WLK_LRF_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_LRF_WLK_IWAIT']/100-waitThresh).clip(0)),util_WALK_LRF_Long_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xwait_multiplier * (odt_skims['WLK_LRF_WLK_XWAIT']/100 + dot_skims['WLK_LRF_WLK_XWAIT']/100),util_WALK_LRF_transfer_wait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xfers_wlk_multiplier * ((odt_skims['WLK_LRF_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_LRF_WLK_BOARDS']-1).clip(0)),util_WALK_LRF_number_of_transfers,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@2 * wacc_multiplier * df.origin_walk_time # (2),util_WALK_LRF_Walk_access_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@2 * wegr_multiplier * df.destination_walk_time # (2),util_WALK_LRF_Walk_egress_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@waux_multiplier * (odt_skims['WLK_LRF_WLK_WAUX']/100 + dot_skims['WLK_LRF_WLK_WAUX']/100),util_WALK_LRF_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['WLK_LRF_WLK_FAR'] + dot_skims['WLK_LRF_WLK_FAR']),util_WALK_LRF_Fare,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (2),util_WALK_LRF_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (2),util_WALK_LRF_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age <= 10) # (2),util_WALK_LRF_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_express_available == False,util_WALK_EXP_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(odt_skims['WLK_EXP_WLK_TOTIVT']/100 + dot_skims['WLK_EXP_WLK_TOTIVT']/100),util_WALK_EXP_In_vehicle_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(ivt_exp_multiplier - 1)*(odt_skims['WLK_EXP_WLK_KEYIVT']/100 + dot_skims['WLK_EXP_WLK_KEYIVT']/100),util_WALK_EXP_In_vehicle_time_on_Express_bus,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@short_i_wait_multiplier * ((odt_skims['WLK_EXP_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_EXP_WLK_IWAIT']/100).clip(upper=waitThresh)),util_WALK_EXP_Short_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@long_i_wait_multiplier * ((odt_skims['WLK_EXP_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_EXP_WLK_IWAIT']/100-waitThresh).clip(0)),util_WALK_EXP_Long_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xwait_multiplier * (odt_skims['WLK_EXP_WLK_XWAIT']/100 + dot_skims['WLK_EXP_WLK_XWAIT']/100),util_WALK_EXP_transfer_wait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xfers_wlk_multiplier * ((odt_skims['WLK_EXP_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_EXP_WLK_BOARDS']-1).clip(0)),util_WALK_EXP_number_of_transfers,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@2 * wacc_multiplier * df.origin_walk_time # (3),util_WALK_EXP_Walk_access_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@2 * wegr_multiplier * df.destination_walk_time # (3),util_WALK_EXP_Walk_egress_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@waux_multiplier * (odt_skims['WLK_EXP_WLK_WAUX']/100 + dot_skims['WLK_EXP_WLK_WAUX']/100),util_WALK_EXP_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['WLK_EXP_WLK_FAR'] + dot_skims['WLK_EXP_WLK_FAR']),util_WALK_EXP_Fare,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (3),util_WALK_EXP_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (3),util_WALK_EXP_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age <= 10) # (3),util_WALK_EXP_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_heavyrail_available == False,util_WALK_HVY_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(odt_skims['WLK_HVY_WLK_TOTIVT']/100 + dot_skims['WLK_HVY_WLK_TOTIVT']/100),util_WALK_HVY_In_vehicle_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(ivt_hvy_multiplier-1) * (odt_skims['WLK_HVY_WLK_KEYIVT']/100 + dot_skims['WLK_HVY_WLK_KEYIVT']/100),util_WALK_HVY_In_vehicle_time_on_heavy_rail,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@short_i_wait_multiplier * ((odt_skims['WLK_HVY_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_HVY_WLK_IWAIT']/100).clip(upper=waitThresh)),util_WALK_HVY_Short_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@long_i_wait_multiplier * ((odt_skims['WLK_HVY_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_HVY_WLK_IWAIT']/100-waitThresh).clip(0)),util_WALK_HVY_Long_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xwait_multiplier * (odt_skims['WLK_HVY_WLK_XWAIT']/100 + dot_skims['WLK_HVY_WLK_XWAIT']/100),util_WALK_HVY_transfer_wait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xfers_wlk_multiplier * ((odt_skims['WLK_HVY_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_HVY_WLK_BOARDS']-1).clip(0)),util_WALK_HVY_number_of_transfers,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@2 * wacc_multiplier * df.origin_walk_time # (4),util_WALK_HVY_Walk_access_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@wegr_multiplier * 2 *df.destination_walk_time,util_WALK_HVY_Walk_egress_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@waux_multiplier * (odt_skims['WLK_HVY_WLK_WAUX']/100 + dot_skims['WLK_HVY_WLK_WAUX']/100),util_WALK_HVY_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['WLK_HVY_WLK_FAR'] + dot_skims['WLK_HVY_WLK_FAR']),util_WALK_HVY_Fare,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (4),util_WALK_HVY_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (4),util_WALK_HVY_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age <= 10) # (4),util_WALK_HVY_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_commuter_available == False,util_WALK_COM_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(odt_skims['WLK_COM_WLK_TOTIVT']/100 + dot_skims['WLK_COM_WLK_TOTIVT']/100),util_WALK_COM_In_vehicle_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(ivt_com_multiplier - 1) * (odt_skims['WLK_COM_WLK_KEYIVT']/100 + dot_skims['WLK_COM_WLK_KEYIVT']/100),util_WALK_COM_In_vehicle_time_on_commuter_rail,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@short_i_wait_multiplier * ((odt_skims['WLK_COM_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_COM_WLK_IWAIT']/100).clip(upper=waitThresh)),util_WALK_COM_Short_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@long_i_wait_multiplier * ((odt_skims['WLK_COM_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_COM_WLK_IWAIT']/100-waitThresh).clip(0)),util_WALK_COM_Long_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xwait_multiplier * (odt_skims['WLK_COM_WLK_XWAIT']/100 + dot_skims['WLK_COM_WLK_XWAIT']/100),util_WALK_COM_transfer_wait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xfers_wlk_multiplier * ((odt_skims['WLK_COM_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_COM_WLK_BOARDS']-1).clip(0)),util_WALK_COM_number_of_transfers,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@2 * wacc_multiplier * df.origin_walk_time # (5),util_WALK_COM_Walk_access_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@2 * wegr_multiplier * df.destination_walk_time # (4),util_WALK_COM_Walk_egress_time,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64,26.64
@waux_multiplier * (odt_skims['WLK_COM_WLK_WAUX']/100 + dot_skims['WLK_COM_WLK_WAUX']/100),util_WALK_COM_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['WLK_COM_WLK_FAR'] + dot_skims['WLK_COM_WLK_FAR']),util_WALK_COM_Fare,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (5),util_WALK_COM_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (5),util_WALK_COM_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age < 10),util_WALK_COM_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
drive_local_available == False,util_DRIVE_LOC_Unavailable,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0
auto_ownership == 0 # (3),util_DRIVE_LOC_Unavailable_for_zero_auto_households,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (3),util_DRIVE_LOC_Unavailable_for_persons_less_than_16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['DRV_LOC_WLK_TOTIVT']/100 + dot_skims['WLK_LOC_DRV_TOTIVT']/100),util_DRIVE_LOC_In_vehicle_time,0.0,119.52999877929688,117.13740539550781,94.78400421142578,72.63099670410156,25.5,70.36039733886719,27.75,65.68799591064453,74.44839477539062,25.831201553344727,19.128599166870117,22.45199966430664,4.081199645996094,15.030600547790527,75.75920104980469,57.82140350341797,53.74020004272461,22.98379898071289,0.0,118.57440185546875,115.71839904785156,0.0,148.33718872070312
@short_i_wait_multiplier * ((odt_skims['DRV_LOC_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_LOC_DRV_IWAIT']/100).clip(upper=waitThresh)),util_DRIVE_LOC_Short_iwait_time,0.0,24.034399032592773,32.034202575683594,40.0,40.0,40.0,40.0,40.0,24.034399032592773,24.034399032592773,40.0,30.034399032592773,35.034202575683594,17.194398880004883,24.034399032592773,32.034202575683594,35.034202575683594,25.068401336669922,40.0,0.0,35.034202575683594,35.034202575683594,0.0,35.034202575683594
@long_i_wait_multiplier * ((odt_skims['DRV_LOC_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_LOC_DRV_IWAIT']/100-waitThresh).clip(0)),util_DRIVE_LOC_Long_iwait_time,0.0,0.0,5.017099380493164,10.017200469970703,10.034198760986328,40.0,10.017200469970703,40.0,0.0,0.0,10.017200469970703,0.0,0.01710033416748047,0.0,0.0,0.01710033416748047,0.01710033416748047,0.0,32.53419876098633,0.0,0.01710033416748047,0.01710033416748047,0.0,0.01710033416748047
@xwait_multiplier * (odt_skims['DRV_LOC_WLK_XWAIT']/100 + dot_skims['WLK_LOC_DRV_XWAIT']/100),util_DRIVE_LOC_transfer_wait_time,0.0,0.0,42.0,0.0,60.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,35.0,0.0,0.0,32.0,35.0,25.0,105.0,0.0,35.0,35.0,0.0,35.0
@xfers_wlk_multiplier * ((odt_skims['DRV_LOC_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_LOC_DRV_BOARDS']-1).clip(0)),util_DRIVE_LOC_number_of_transfers,0.0,0.0,20.0,0.0,20.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,20.0,0.0,0.0,20.0,20.0,20.0,20.0,0.0,20.0,20.0,0.0,20.0
@dtim_multiplier * (odt_skims['DRV_LOC_WLK_DTIM']/100 + dot_skims['WLK_LOC_DRV_DTIM']/100),util_DRIVE_LOC_Drive_time,0.0,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,66.27999877929688,64.12000274658203,66.27999877929688,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,66.27999877929688,0.0,64.12000274658203,64.12000274658203,0.0,64.12000274658203
@wacc_multiplier * df.destination_walk_time,util_DRIVE_LOC_Walk_access_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@wegr_multiplier * df.destination_walk_time,util_DRIVE_LOC_Walk_egress_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@waux_multiplier * (odt_skims['DRV_LOC_WLK_WAUX']/100 + dot_skims['WLK_LOC_DRV_WAUX']/100),util_DRIVE_LOC_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * ((odt_skims['DRV_LOC_WLK_FAR'] + dot_skims['WLK_LOC_DRV_FAR']) + ((odt_skims['DRV_LOC_WLK_DDIST']/100+dot_skims['WLK_LOC_DRV_DDIST']/100) * costPerMile)),util_DRIVE_LOC_Fare_and_operating_cost,0.0,9.38543994140625,12.62543994140625,9.38543994140625,12.62543994140625,8.562945556640626,9.38543994140625,8.562945556640626,9.38543994140625,9.38543994140625,9.38543994140625,9.38543994140625,12.62543994140625,9.38543994140625,9.38543994140625,12.62543994140625,12.62543994140625,12.62543994140625,11.802945556640625,0.0,12.62543994140625,12.62543994140625,0.0,12.62543994140625
@dacc_ratio * ((odt_skims['DRV_LOC_WLK_DDIST']/100+ dot_skims['WLK_LOC_DRV_DDIST']/100)/ (od_skims['DIST']*2)),util_DRIVE_LOC_Ratio_of_drive_access_distance_to_OD_distance,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (6),util_DRIVE_LOC_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (6),util_DRIVE_LOC_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age < 10) # (2),util_DRIVE_LOC_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
drive_lrf_available == False,util_DRIVE_LRF_Unavailable,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0
auto_ownership == 0 # (4),util_DRIVE_LRF_Unavailable_for_zero_auto_households,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (4),util_DRIVE_LRF_Unavailable_for_persons_less_than_16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['DRV_LRF_WLK_TOTIVT']/100 + dot_skims['WLK_LRF_DRV_TOTIVT']/100),util_DRIVE_LRF_In_vehicle_time,0.0,119.52999877929688,85.84120178222656,94.78400421142578,122.68719482421875,58.17180252075195,70.36039733886719,51.38560104370117,63.35700225830078,74.44839477539062,25.831201553344727,19.128599166870117,22.45199966430664,4.081199645996094,15.030600547790527,79.33419799804688,3.162400007247925,5.486200332641602,12.891200065612793,0.0,63.915199279785156,61.059200286865234,0.0,93.6780014038086
@(ivt_lrt_multiplier-1) * (odt_skims['DRV_LRF_WLK_KEYIVT']/100 + dot_skims['WLK_LRF_DRV_KEYIVT']/100),util_DRIVE_LRF_In_vehicle_time_on_Light_Rail,-0.0,-0.0,-3.669680118560791,-0.0,-6.18720006942749,-3.669680118560791,-0.0,-3.669680118560791,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-6.18720006942749,-0.31624001264572144,-0.31624001264572144,-1.289120078086853,-0.0,-0.31624001264572144,-0.31624001264572144,-0.0,-0.31624001264572144
@(ivt_ferry_multiplier-ivt_lrt_multiplier)*(odt_skims['DRV_LRF_WLK_FERRYIVT']/100 + dot_skims['WLK_LRF_DRV_FERRYIVT']/100),util_DRIVE_LRF_In_vehicle_time_on_Ferry,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@short_i_wait_multiplier * ((odt_skims['DRV_LRF_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_LRF_DRV_IWAIT']/100).clip(upper=waitThresh)),util_DRIVE_LRF_Short_iwait_time,0.0,24.034399032592773,35.06999969482422,40.0,35.06999969482422,35.06999969482422,40.0,24.31999969482422,24.034399032592773,24.034399032592773,40.0,30.034399032592773,35.034202575683594,17.194398880004883,24.034399032592773,35.06999969482422,30.105600357055664,28.979999542236328,30.105600357055664,0.0,35.06999969482422,35.06999969482422,0.0,35.06999969482422
@long_i_wait_multiplier * ((odt_skims['DRV_LRF_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_LRF_DRV_IWAIT']/100-waitThresh).clip(0)),util_DRIVE_LRF_Long_iwait_time,0.0,0.0,5.034999847412109,10.017200469970703,5.034999847412109,5.034999847412109,10.017200469970703,0.0,0.0,0.0,10.017200469970703,0.0,0.01710033416748047,0.0,0.0,0.034999847412109375,0.0,0.0,0.0,0.0,0.034999847412109375,0.034999847412109375,0.0,0.034999847412109375
@xwait_multiplier * (odt_skims['DRV_LRF_WLK_XWAIT']/100 + dot_skims['WLK_LRF_DRV_XWAIT']/100),util_DRIVE_LRF_transfer_wait_time,0.0,0.0,45.0,0.0,45.0,45.0,0.0,24.479999542236328,0.0,0.0,0.0,0.0,35.0,0.0,0.0,35.0,0.0,28.84000015258789,0.0,0.0,35.0,35.0,0.0,35.0
@xfers_drv_multiplier * ((odt_skims['DRV_LRF_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_LRF_DRV_BOARDS']-1).clip(0)),util_DRIVE_LRF_number_of_transfers,0.0,0.0,40.0,0.0,40.0,40.0,0.0,40.0,0.0,0.0,0.0,0.0,40.0,0.0,0.0,40.0,0.0,40.0,0.0,0.0,40.0,40.0,0.0,40.0
@dtim_multiplier * (odt_skims['DRV_LRF_WLK_DTIM']/100 + dot_skims['WLK_LRF_DRV_DTIM']/100),util_DRIVE_LRF_Drive_time,0.0,64.12000274658203,38.63999938964844,64.12000274658203,38.63999938964844,38.63999938964844,64.12000274658203,38.63999938964844,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,38.63999938964844,41.959999084472656,38.63999938964844,38.63999938964844,0.0,41.959999084472656,41.959999084472656,0.0,41.959999084472656
@wacc_multiplier * df.destination_walk_time # (2),util_DRIVE_LRF_Walk_access_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@wegr_multiplier * df.destination_walk_time # (2),util_DRIVE_LRF_Walk_egress_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@waux_multiplier * (odt_skims['DRV_LRF_WLK_WAUX']/100 + dot_skims['WLK_LRF_DRV_WAUX']/100),util_DRIVE_LRF_Walk_other_time,0.0,0.0,12.0,0.0,12.0,12.0,0.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.0,8.0,12.0,8.0,0.0,12.0,12.0,0.0,12.0
@ivt_cost_multiplier * df.ivot * ((odt_skims['DRV_LRF_WLK_FAR']+dot_skims['WLK_LRF_DRV_FAR']) + ((odt_skims['DRV_LRF_WLK_DDIST']/100+dot_skims['WLK_LRF_DRV_DDIST']/100) *costPerMile)),util_DRIVE_LRF_Fare_and_operating_cost,0.0,9.38543994140625,7.7571357421875,9.38543994140625,7.7571357421875,7.7571357421875,9.38543994140625,7.7571357421875,9.38543994140625,9.38543994140625,9.38543994140625,9.38543994140625,12.62543994140625,9.38543994140625,9.38543994140625,7.7571357421875,3.5906931152343753,7.7571357421875,2.8971361083984375,0.0,8.450693115234376,8.450693115234376,0.0,8.450693115234376
@dacc_ratio * ((odt_skims['DRV_LRF_WLK_DDIST']/100+ dot_skims['WLK_LRF_DRV_DDIST']/100)/ (od_skims['DIST']*2)),util_DRIVE_LRF_Ratio_of_drive_access_distance_to_OD_distance,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (7),util_DRIVE_LRF_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (7),util_DRIVE_LRF_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age < 10) # (3),util_DRIVE_LRF_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
drive_express_available == False,util_DRIVE_EXP_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
auto_ownership == 0 # (5),util_DRIVE_EXP_Unavailable_for_zero_auto_households,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (5),util_DRIVE_EXP_Unavailable_for_persons_less_than_16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['DRV_EXP_WLK_TOTIVT']/100 + dot_skims['WLK_EXP_DRV_TOTIVT']/100),util_DRIVE_EXP_In_vehicle_time,0.0,119.52999877929688,49.38159942626953,94.78400421142578,72.63099670410156,25.5,70.36039733886719,27.75,63.35700225830078,74.44839477539062,25.831201553344727,19.128599166870117,22.45199966430664,4.081199645996094,15.030600547790527,75.75920104980469,57.003196716308594,53.69020080566406,39.16780090332031,0.0,118.57440185546875,115.71839904785156,0.0,148.33718872070312
@(ivt_exp_multiplier-1) * (odt_skims['DRV_EXP_WLK_KEYIVT']/100 + dot_skims['WLK_EXP_DRV_KEYIVT']/100),util_DRIVE_EXP_In_vehicle_time_on_Express_bus,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@short_i_wait_multiplier * ((odt_skims['DRV_EXP_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_EXP_DRV_IWAIT']/100).clip(upper=waitThresh)),util_DRIVE_EXP_Short_iwait_time,0.0,24.034399032592773,40.0,40.0,40.0,40.0,40.0,40.0,24.034399032592773,24.034399032592773,40.0,30.034399032592773,35.034202575683594,17.194398880004883,24.034399032592773,32.034202575683594,30.139999389648438,25.068401336669922,30.139999389648438,0.0,35.034202575683594,35.034202575683594,0.0,35.034202575683594
@long_i_wait_multiplier * ((odt_skims['DRV_EXP_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_EXP_DRV_IWAIT']/100-waitThresh).clip(0)),util_DRIVE_EXP_Long_iwait_time,0.0,0.0,25.034198760986328,10.017200469970703,10.034198760986328,40.0,10.017200469970703,40.0,0.0,0.0,10.017200469970703,0.0,0.01710033416748047,0.0,0.0,0.01710033416748047,0.0,0.0,0.0,0.0,0.01710033416748047,0.01710033416748047,0.0,0.01710033416748047
@xwait_multiplier * (odt_skims['DRV_EXP_WLK_XWAIT']/100 + dot_skims['WLK_EXP_DRV_XWAIT']/100),util_DRIVE_EXP_transfer_wait_time,0.0,0.0,90.0,0.0,60.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,35.0,0.0,0.0,32.0,30.0,25.0,30.0,0.0,35.0,35.0,0.0,35.0
@xfers_drv_multiplier * ((odt_skims['DRV_EXP_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_EXP_DRV_BOARDS']-1).clip(0)),util_DRIVE_EXP_number_of_transfers,0.0,0.0,40.0,0.0,40.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,40.0,0.0,0.0,40.0,40.0,40.0,40.0,0.0,40.0,40.0,0.0,40.0
@dtim_multiplier * (odt_skims['DRV_EXP_WLK_DTIM']/100 + dot_skims['WLK_EXP_DRV_DTIM']/100),util_DRIVE_EXP_Drive_time,0.0,64.12000274658203,66.27999877929688,64.12000274658203,64.12000274658203,66.27999877929688,64.12000274658203,66.27999877929688,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,64.12000274658203,0.0,64.12000274658203,64.12000274658203,0.0,64.12000274658203
@wacc_multiplier * df.destination_walk_time # (3),util_DRIVE_EXP_Walk_access_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@wegr_multiplier * df.destination_walk_time # (3),util_DRIVE_EXP_Walk_egress_ime,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@waux_multiplier * (odt_skims['DRV_EXP_WLK_WAUX']/100 + dot_skims['WLK_EXP_DRV_WAUX']/100),util_DRIVE_EXP_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,0.0,4.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * ((odt_skims['DRV_EXP_WLK_FAR']+dot_skims['WLK_EXP_DRV_FAR']) + ((odt_skims['DRV_EXP_WLK_DDIST']/100+dot_skims['WLK_EXP_DRV_DDIST']/100) *costPerMile)),util_DRIVE_EXP_Fare_and_operating_cost,0.0,9.38543994140625,11.802945556640625,9.38543994140625,12.62543994140625,8.562945556640626,9.38543994140625,8.562945556640626,9.38543994140625,9.38543994140625,9.38543994140625,9.38543994140625,12.62543994140625,9.38543994140625,9.38543994140625,12.62543994140625,11.00543994140625,12.62543994140625,11.00543994140625,0.0,12.62543994140625,12.62543994140625,0.0,12.62543994140625
@dacc_ratio * ((odt_skims['DRV_EXP_WLK_DDIST']/100+ dot_skims['WLK_EXP_DRV_DDIST']/100)/ (od_skims['DIST']*2)),util_DRIVE_EXP_Ratio_of_drive_access_distance_to_OD_distance,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (8),util_DRIVE_EXP_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (8),util_DRIVE_EXP_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age < 10) # (4),util_DRIVE_EXP_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
drive_heavyrail_available == False,util_DRIVE_HVY_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
auto_ownership == 0 # (6),util_DRIVE_HVY_Unavailable_for_zero_auto_households,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (6),util_DRIVE_HVY_Unavailable_for_persons_less_than_16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['DRV_HVY_WLK_TOTIVT']/100 + dot_skims['WLK_HVY_DRV_TOTIVT']/100),util_DRIVE_HVY_In_vehicle_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(ivt_hvy_multiplier-1) * (odt_skims['DRV_HVY_WLK_KEYIVT']/100 + dot_skims['WLK_HVY_DRV_KEYIVT']/100),util_DRIVE_HVY_In_vehicle_time_on_heavy_rail,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@short_i_wait_multiplier * ((odt_skims['DRV_HVY_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_HVY_DRV_IWAIT']/100).clip(upper=waitThresh)),util_DRIVE_HVY_Short_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@long_i_wait_multiplier * ((odt_skims['DRV_HVY_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_HVY_DRV_IWAIT']/100-waitThresh).clip(0)),util_DRIVE_HVY_Long_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xwait_multiplier * (odt_skims['DRV_HVY_WLK_XWAIT']/100 + dot_skims['WLK_HVY_DRV_XWAIT']/100),util_DRIVE_HVY_transfer_wait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xfers_drv_multiplier * ((odt_skims['DRV_HVY_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_HVY_DRV_BOARDS']-1).clip(0)),util_DRIVE_HVY_number_of_transfers,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@dtim_multiplier * (odt_skims['DRV_HVY_WLK_DTIM']/100 + dot_skims['WLK_HVY_DRV_DTIM']/100),util_DRIVE_HVY_Drive_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@wacc_multiplier * df.destination_walk_time # (4),util_DRIVE_HVY_Walk_access_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@wegr_multiplier * df.destination_walk_time # (4),util_DRIVE_HVY_Walk_egress_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@waux_multiplier * (odt_skims['DRV_HVY_WLK_WAUX']/100 + dot_skims['WLK_HVY_DRV_WAUX']/100),util_DRIVE_HVY_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * ((odt_skims['DRV_HVY_WLK_FAR']+dot_skims['WLK_HVY_DRV_FAR']) + ((odt_skims['DRV_HVY_WLK_DDIST']/100+dot_skims['WLK_HVY_DRV_DDIST']/100) *costPerMile)),util_DRIVE_HVY_Fare_and_operating_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@dacc_ratio * (odt_skims['DRV_HVY_WLK_DDIST']/100) / od_skims['DIST'],util_DRIVE_HVY_Ratio_of_drive_access_distance_to_OD_distance,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (9),util_DRIVE_HVY_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (9),util_DRIVE_HVY_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age < 10) # (5),util_DRIVE_HVY_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
drive_commuter_available == False,util_DRIVE_COM_Unavailable,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
auto_ownership == 0 # (7),util_DRIVE_COM_Unavailable_for_zero_auto_households,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
age < 16 # (7),util_DRIVE_COM_Unavailable_for_persons_less_than_16,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['DRV_COM_WLK_TOTIVT']/100 + dot_skims['WLK_COM_DRV_TOTIVT']/100),util_DRIVE_COM_In_vehicle_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(ivt_com_multiplier - 1) * (odt_skims['DRV_COM_WLK_KEYIVT']/100 + dot_skims['WLK_COM_DRV_KEYIVT']/100),util_DRIVE_COM_In_vehicle_time_on_commuter_rail,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@short_i_wait_multiplier * ((odt_skims['DRV_COM_WLK_IWAIT']/100).clip(upper=waitThresh) + (dot_skims['WLK_COM_DRV_IWAIT']/100).clip(upper=waitThresh)),util_DRIVE_COM_Short_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@long_i_wait_multiplier * ((odt_skims['DRV_COM_WLK_IWAIT']/100-waitThresh).clip(0) + (dot_skims['WLK_COM_DRV_IWAIT']/100-waitThresh).clip(0)),util_DRIVE_COM_Long_iwait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xwait_multiplier * (odt_skims['DRV_COM_WLK_XWAIT']/100 + dot_skims['WLK_COM_DRV_XWAIT']/100),util_DRIVE_COM_transfer_wait_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@xfers_drv_multiplier * ((odt_skims['DRV_COM_WLK_BOARDS']-1).clip(0) + (dot_skims['WLK_COM_DRV_BOARDS']-1).clip(0)),util_DRIVE_COM_number_of_transfers,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@dtim_multiplier * (odt_skims['DRV_COM_WLK_DTIM']/100 + dot_skims['WLK_COM_DRV_DTIM']/100),util_DRIVE_COM_Drive_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@wacc_multiplier * df.destination_walk_time # (5),util_DRIVE_COM_Walk_access_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@wegr_multiplier * df.destination_walk_time # (5),util_DRIVE_COM_Walk_egress_time,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32,13.32
@waux_multiplier * (odt_skims['DRV_COM_WLK_WAUX']/100 + dot_skims['WLK_COM_DRV_WAUX']/100),util_DRIVE_COM_Walk_other_time,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * ((odt_skims['DRV_COM_WLK_FAR']+dot_skims['WLK_COM_DRV_FAR']) + ((odt_skims['DRV_COM_WLK_DDIST']/100+dot_skims['WLK_COM_DRV_DDIST']/100) *costPerMile)),util_DRIVE_COM_Fare_and_operating_cost,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@dacc_ratio * ((odt_skims['DRV_COM_WLK_DDIST']/100 + dot_skims['WLK_COM_DRV_DDIST']/100)/ (od_skims['DIST']*2)),util_DRIVE_COM_Ratio_of_drive_access_distance_to_OD_distance,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@density_index_multiplier * df.dest_density_index # (10),util_DRIVE_COM_Destination_zone_densityIndex,-0.019344878077919816,-0.6374850041782112,-0.5091148217967183,-0.34373095139584864,-0.6053183008571223,-0.32910667021155837,-0.7146880544091684,-0.8778549068564827,-0.8173586556766109,-0.5889380572003712,-0.4211000780252698,-0.5432069225746992,-0.43775570688853493,-0.37129667947628175,-0.30907302500858064,-0.032200216587779086,-0.23365987596712623,-0.34330172574891243,-0.5865963431922524,-0.037058756890651044,-0.17640911638705595,-0.23934260195553023,-0.0028159454335801837,-0.005298001465547034
@coef_topology_trn_multiplier * df.dest_topology # (10),util_DRIVE_COM_Topology,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
@(df.age < 10) # (6),util_DRIVE_COM_Person_is_less_than_10_years_old,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(odt_skims['HOV2TOLL_TIME'] + dot_skims['HOV2TOLL_TIME']) # (2),util_Taxi_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@1.5 * df.totalWaitTaxi,util_Taxi_Wait_time,54.0,54.0,54.0,54.0,54.0,54.0,54.0,48.0,48.0,54.0,54.0,48.0,48.0,54.0,54.0,54.0,54.0,54.0,48.0,65.69999999999999,59.7,54.0,79.5,79.5
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_VTOLL'] + dot_skims['HOV2TOLL_VTOLL']),util_Taxi_Tolls,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']),util_Taxi_Bridge_toll,0.504719970703125,0.6464399871826172,0.5114400329589844,0.5196000366210938,0.4221600036621094,0.37788002014160155,0.40175999450683597,0.3844800109863281,0.45803997802734375,0.5119199981689453,0.3797999954223633,0.261,0.35112000274658206,0.3307199935913086,0.3718800201416016,0.48275999450683593,0.15095999908447266,0.1863599967956543,0.2575199890136719,0.1586400032043457,0.13752000045776366,0.11783999633789062,0.447,0.27695999908447266
@ivt_cost_multiplier * df.ivot * (Taxi_baseFare * 2 + (odt_skims['HOV2TOLL_DIST'] + dot_skims['HOV2TOLL_DIST']) * Taxi_costPerMile +(odt_skims['HOV2TOLL_TIME'] + dot_skims['HOV2TOLL_TIME']) * Taxi_costPerMinute)*100,util_Taxi_Fare,119.99160461425782,158.4468017578125,131.256005859375,127.81559143066406,105.77280578613282,103.71959838867188,109.26600036621095,103.91640014648438,111.8771942138672,123.4595947265625,96.82679443359376,72.01199798583986,88.78799743652344,84.65879516601562,93.61320190429687,114.82200622558594,46.42679901123047,54.59520263671875,69.35039978027345,44.98080139160157,41.316000366210936,37.27800064086914,109.30679626464843,73.78079681396484
@(odt_skims['HOV2TOLL_TIME'] + dot_skims['HOV2TOLL_TIME']) # (3),util_TNC_Single_In_vehicle_time,47.19999694824219,63.599998474121094,52.060001373291016,52.37000274658203,42.099998474121094,45.0,47.75,45.720001220703125,44.44000244140625,48.5,39.30999755859375,32.38999938964844,35.56999969482422,33.81999969482422,39.44000244140625,44.13999938964844,21.809999465942383,25.25,29.759998321533203,21.260000228881836,19.700000762939453,18.25,50.849998474121094,35.400001525878906
@1.5 * df.totalWaitSingleTNC,util_TNC_Single_Wait_time,24.9,24.9,24.9,24.9,24.9,24.9,24.9,19.95,19.95,24.9,24.9,19.95,19.95,24.9,24.9,24.9,24.9,24.9,19.95,28.199999999999996,28.049999999999997,24.9,30.9,30.9
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_VTOLL'] + dot_skims['HOV2TOLL_VTOLL']) # (2),util_TNC_Single_Tolls,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_BTOLL'] + odr_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL'] + dor_skims['HOV2TOLL_BTOLL']),util_TNC_Single_Bridge_toll,1.00943994140625,1.2928798828125,1.0228799743652344,1.0392000732421875,0.8443199157714844,0.755759994506836,0.8035199890136719,0.7689599304199219,0.9160799560546875,1.0238399047851563,0.7595999450683594,0.522,0.7022400054931641,0.6614399871826172,0.7437600402832032,0.9655199890136719,0.3019199981689453,0.3727199935913086,0.515040023803711,0.3172800064086914,0.2750400009155273,0.23567999267578124,0.894,0.5539199981689453
"@ivt_cost_multiplier * df.ivot * np.maximum(TNC_single_baseFare * 2 + (odt_skims['HOV2TOLL_DIST'] + dot_skims['HOV2TOLL_DIST']) * TNC_single_costPerMile + (odt_skims['HOV2TOLL_TIME'] + dot_skims['HOV2TOLL_TIME']) * TNC_single_costPerMinute, TNC_single_costMinimum) * 100",util_TNC_Single_Cost,81.9315673828125,107.75388793945314,89.50776672363281,87.58608398437501,72.59448852539062,72.041162109375,75.84960021972657,72.31236419677735,76.6359603881836,84.22116394042969,66.81144104003907,50.949243164062494,61.345321655273445,58.575004577636726,64.98156280517578,78.27323913574219,33.84144058227539,39.316923522949224,48.835198974609376,32.88503952026367,30.42480010986328,27.772801208496094,76.5508804321289,52.630078125000004
@(odt_skims['HOV2TOLL_TIME'] + dot_skims['HOV2TOLL_TIME']) * TNC_shared_IVTFactor,util_TNC_Shared_In_vehicle_time,70.79999542236328,95.39999389648438,78.09000396728516,78.55500793457031,63.14999771118164,67.5,71.625,68.58000183105469,66.66000366210938,72.75,58.964996337890625,48.584999084472656,53.35499954223633,50.72999954223633,59.160003662109375,66.20999908447266,32.71500015258789,37.875,44.63999938964844,31.889999389648438,29.55000114440918,27.375,76.27499389648438,53.10000228881836
@1.5 * df.totalWaitSharedTNC,util_TNC_Shared_Wait_time,34.5,34.5,34.5,34.5,34.5,34.5,34.5,30.0,30.0,34.5,34.5,30.0,30.0,34.5,34.5,34.5,34.5,34.5,30.0,45.0,39.0,34.5,45.0,45.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_VTOLL'] + dot_skims['HOV2TOLL_VTOLL']) # (3),util_TNC_Shared_Tolls,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ivt_cost_multiplier * df.ivot * (odt_skims['HOV2TOLL_BTOLL'] + odr_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL'] + dor_skims['HOV2TOLL_BTOLL']) # (2),util_TNC_Shared_Bridge_toll,1.00943994140625,1.2928798828125,1.0228799743652344,1.0392000732421875,0.8443199157714844,0.755759994506836,0.8035199890136719,0.7689599304199219,0.9160799560546875,1.0238399047851563,0.7595999450683594,0.522,0.7022400054931641,0.6614399871826172,0.7437600402832032,0.9655199890136719,0.3019199981689453,0.3727199935913086,0.515040023803711,0.3172800064086914,0.2750400009155273,0.23567999267578124,0.894,0.5539199981689453
"@ivt_cost_multiplier * df.ivot * np.maximum(TNC_shared_baseFare * 2 + (odt_skims['HOV2TOLL_DIST'] + dot_skims['HOV2TOLL_DIST']) * TNC_shared_costPerMile + (odt_skims['HOV2TOLL_TIME'] + dot_skims['HOV2TOLL_TIME']) * TNC_shared_costPerMinute, TNC_shared_costMinimum) * 100",util_TNC_Shared_Cost,36.07235870361328,46.448281860351564,39.11688079833984,38.352717590332034,32.32488098144531,32.11955795288086,33.651596832275395,32.23139877319336,33.94763717651367,36.99155731201172,30.00575866699219,23.648519897460936,27.807957458496098,26.694838714599612,29.27723922729492,34.598517608642574,16.775759124755858,18.975718688964843,22.79231872558594,16.391760635375977,15.40319938659668,14.338800430297852,33.947277832031254,24.334080505371094
@(df.is_indiv & (df.auto_ownership == 0)),util_Walk_ASC_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)),util_Walk_ASC_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)),util_Walk_ASC_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership == 0)) # (2),util_Bike_ASC_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (2),util_Bike_ASC_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (2),util_Bike_ASC_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (3),util_Shared_ride_2_ASC_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (3),util_Shared_ride_2_ASC_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership == 0)) # (4),util_Shared_ride_3p_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (4),util_Shared_ride_3p_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (4),util_Shared_ride_3p_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership == 0)) # (5),util_Walk_to_Transit_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (5),util_Walk_to_Transit_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (5),util_Walk_to_Transit_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (6),util_Drive_to_Transit_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (6),util_Drive_to_Transit_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership == 0)) # (7),util_Taxi_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (7),util_Taxi_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (7),util_Taxi_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership == 0)) # (8),util_TNC_Single_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (8),util_TNC_Single_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (8),util_TNC_Single_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_indiv & (df.auto_ownership == 0)) # (9),util_TNC_Shared_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (9),util_TNC_Shared_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_indiv & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (9),util_TNC_Shared_Auto_sufficient,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.is_joint & (df.auto_ownership == 0)),util_Joint_Walk_ASC_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)),util_Joint_Walk_ASC_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)),util_Joint_Walk_ASC_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership == 0)) # (2),util_Joint_Bike_ASC_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (2),util_Joint_Bike_ASC_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (2),util_Joint_Bike_ASC_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership == 0)) # (4),util_Joint_Shared_ride_3p_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (4),util_Joint_Shared_ride_3p_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (4),util_Joint_Shared_ride_3p_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership == 0)) # (5),util_Joint_Walk_to_Transit_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (5),util_Joint_Walk_to_Transit_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (5),util_Joint_Walk_to_Transit_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (6),util_Joint_Drive_to_Transit_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (6),util_Joint_Drive_to_Transit_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership == 0)) # (7),util_Joint_Taxi_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (7),util_Joint_Taxi_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (7),util_Joint_Taxi_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership == 0)) # (8),util_Joint_TNC_Single_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (8),util_Joint_TNC_Single_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (8),util_Joint_TNC_Single_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership == 0)) # (9),util_Joint_TNC_Shared_Zero_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership < df.num_workers) & (df.auto_ownership > 0)) # (9),util_Joint_TNC_Shared_Auto_deficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(df.is_joint & (df.auto_ownership >= df.num_workers) & (df.auto_ownership > 0)) # (9),util_Joint_TNC_Shared_Auto_sufficient,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
1,util_Local_bus_ASC,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.walk_ferry_available == False),util_Walk_to_Light_Rail_ASC,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@(df.drive_ferry_available == False),util_Drive_to_Light_Rail_ASC,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@df.walk_ferry_available,util_Walk_to_Ferry_ASC,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.drive_ferry_available,util_Drive_to_Ferry_ASC,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
1 # (2),util_Express_Bus_ASC,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
1 # (3),util_Heavy_Rail_ASC,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
1 # (4),util_Commuter_Rail,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@df.destination_in_cbd,util_Walk_to_Transit_dest_CBD,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.destination_in_cbd # (2),util_Drive_to_Transit_dest_CBD,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drvtrn_distpen_0_multiplier * (1-od_skims['DIST']/drvtrn_distpen_max).clip(lower=0),util_Drive_to_Transit_distance_penalty,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30.780006408691406,77.75999450683594,21.96000099182129,29.15999412536621,2.520010471343994,0.0,145.08001708984375,123.47999572753906,71.99999237060547,169.1999969482422,180.36000061035156,187.3800048828125,0.0,87.84000396728516
@od_skims.max('DISTWALK') > 3,util_Walk_not_available_for_long_distances,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@od_skims.max('DISTBIKE') > 8,util_Bike_not_available_for_long_distances,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0
is_escort,util_Drive_alone_not_available_for_escort_tours,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
